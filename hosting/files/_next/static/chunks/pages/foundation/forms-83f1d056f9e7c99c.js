(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2534],{14363:function(e,n,s){"use strict";s(27378);var t=s(43991),i=s(68087);function r(e){var n=e.imageURL,s=e.className;return(0,i.jsx)("div",{className:(0,t.iv)("margin:40px 0px;background-image:url('",n,"');background-position:center center;background-repeat:no-repeat;background-size:contain;",s,";","","")})}r.displayName="GuidelineImage",n.Z=r},25309:function(e,n,s){"use strict";s.r(n),s.d(n,{imagePath:function(){return l}});var t=s(24246),i=s(43991),r=s(83685),o=s(14363),a=s(81517);var l="".concat(a.G,"/images/new-guidelines/form");n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.components||{},s=n.wrapper;return s?(0,t.jsx)(s,Object.assign({},e,{children:(0,t.jsx)(a,{})})):a();function a(){var n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"forms",children:(0,t.jsx)(n.a,{href:"#forms",children:"Forms"})}),"\n",(0,t.jsxs)(n.p,{children:["There are 2 main types of forms, those found on setup pages and those on settings pages. Both are used to collect user data via form elements like text, or select inputs. Forms on setup pages are used to setup accounts, processes, or features, and can have a ",(0,t.jsx)(r.rU,{href:"#sticky-footer",children:"sticky footer"}),", whereas a settings page form allows the user to alter data they defined previously on a setup page."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-1@3x.png"),className:(0,i.iv)({name:"226ts8",styles:"width:100%;height:205px"})}),"\n",(0,t.jsx)(n.h1,{id:"setup-page-forms",children:(0,t.jsx)(n.a,{href:"#setup-page-forms",children:"Setup page forms"})}),"\n",(0,t.jsx)(n.p,{children:"Setup page forms can either be contained on a single page or be broken out into multiple pages using a stepper. Use a stepper if the sequence of the form steps are known. Do not use a stepper for settings page forms."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-2@3x.png"),className:(0,i.iv)({name:"j3k0lh",styles:"width:100%;height:461px"})}),"\n",(0,t.jsx)(n.p,{children:"If the setup form starts with a text input, have that input auto-focus on-load. Do not use this pattern for settings page forms."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-3@3x.png"),className:(0,i.iv)({name:"1i5jsrx",styles:"width:100%;height:295px"})}),"\n",(0,t.jsx)(n.h1,{id:"settings-page-forms",children:(0,t.jsx)(n.a,{href:"#settings-page-forms",children:"Settings page forms"})}),"\n",(0,t.jsx)(n.p,{children:"Settings page forms can either live on a single page, or if long with many sections (3+ sections with 3+ inputs each), can be broken up into several different pages. For these types of forms, do not use a sticky footer, and if needed, place the back button on the top left of the page."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-4@3x.png"),className:(0,i.iv)({name:"1amy2oa",styles:"width:100%;height:401px"})}),"\n",(0,t.jsx)(n.p,{children:"When possible, help the user by pre-filling the form."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-5@3x.png"),className:(0,i.iv)({name:"6cr09c",styles:"width:100%;height:351px"})}),"\n",(0,t.jsx)(n.h1,{id:"ui-design--label-placement",children:(0,t.jsx)(n.a,{href:"#ui-design--label-placement",children:"UI design & Label placement"})}),"\n",(0,t.jsxs)(n.p,{children:["Consider the user\u2019s mental model when designing your form. Usually, if it\u2019s a setup form, the user will progress linearly from one input to the next. In this case, having labels above the input is best. On a settings page, if the user is scanning the form for a specific line item, consider placing the labels on the left of the input instead. ",(0,t.jsx)(r.rU,{href:"https://www.uxmatters.com/mt/archives/2006/07/label-placement-in-forms.php",arrowAppearance:"persist",children:"More information on label placement."})]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-6@3x.png"),className:(0,i.iv)({name:"1fwwyvc",styles:"width:100%;height:317px"})}),"\n",(0,t.jsx)(n.h2,{id:"single-column-forms-perform-better-than-multi-column-forms",children:(0,t.jsx)(n.a,{href:"#single-column-forms-perform-better-than-multi-column-forms",children:"Single column forms perform better than multi-column forms"})}),"\n",(0,t.jsxs)(n.p,{children:["Exceptions to this rule are short and/or logically related fields such as City, State, and Zip Code. ",(0,t.jsx)(r.rU,{href:"https://www.nngroup.com/articles/web-form-design/",arrowAppearance:"persist",children:"Learn more."})]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-7@3x.png"),className:(0,i.iv)({name:"1l0xjpx",styles:"width:100%;height:455px"})}),"\n",(0,t.jsx)(n.h2,{id:"progressive-disclosure",children:(0,t.jsx)(n.a,{href:"#progressive-disclosure",children:"Progressive disclosure"})}),"\n",(0,t.jsxs)(n.p,{children:["You can decrease the cognitive load of your setup form by only surfacing the immediate inputs the user needs to complete before surfacing other secondary inputs. ",(0,t.jsx)(r.rU,{href:"https://www.nngroup.com/articles/progressive-disclosure/",arrowAppearance:"persist",children:"Learn more about progressive disclosure."})]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-8@3x.png"),className:(0,i.iv)({name:"1r0hdo0",styles:"width:100%;height:488px"})}),"\n",(0,t.jsx)(n.h1,{id:"form-modals",children:(0,t.jsx)(n.a,{href:"#form-modals",children:"Form modals"})}),"\n",(0,t.jsxs)(n.p,{children:["Forms in ",(0,t.jsx)(r.rU,{href:"https://www.mongodb.design/component/modal/guidelines/",children:"modals"})," allow the user to complete simple tasks (usually less than 4 inputs) while maintaining the context of the page they\u2019re on. Forms with steppers should not be in modals."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-9@3x.png"),className:(0,i.iv)({name:"7sr7lb",styles:"width:100%;height:342px"})}),"\n",(0,t.jsxs)(n.p,{children:["Divide fields into semantic groups, and when possible try to group sections into ",(0,t.jsx)(r.rU,{href:"https://www.mongodb.design/component/card/example/",children:"cards"}),"."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-10@3x.png"),className:(0,i.iv)({name:"nmdxmz",styles:"width:100%;height:405px"})}),"\n",(0,t.jsx)(n.p,{children:"Expandable cards in setup forms can be used to display advanced or secondary parts of your form that are not essential to the form\u2019s completion. Don\u2019t make all your sections in setup forms collapsible."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-11@3x.png"),className:(0,i.iv)({name:"1u1fphc",styles:"width:100%;height:436px"})}),"\n",(0,t.jsx)(n.p,{children:"Use expandable cards on settings pages, that have many sections, to improve scanability."}),"\n",(0,t.jsx)(n.p,{children:"Avoid making sections with only one input expandable/collapsible. Consider having the first card open by default."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-12@3x.png"),className:(0,i.iv)({name:"17g6p7d",styles:"width:100%;height:276px"})}),"\n",(0,t.jsx)(n.p,{children:"When a card is closed, its chevron points opposite to the direction the card opens. When open, the chevron points towards the opened content. Don\u2019t use carets for this pattern. Carets are affordances for menu and select input dropdowns."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-13@3x.png"),className:(0,i.iv)({name:"7d9xa2",styles:"width:100%;height:362px"})}),"\n",(0,t.jsx)(n.h1,{id:"form-buttons",children:(0,t.jsx)(n.a,{href:"#form-buttons",children:"Form buttons"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r.rU,{href:"https://www.mongodb.design/component/button/guidelines/",children:"Button"})," are sorted by importance from right to left, with the primary button on the right."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-14@3x.png"),className:(0,i.iv)({name:"19yt9az",styles:"width:100%;height:438px"})}),"\n",(0,t.jsxs)(n.p,{children:["Form confirmation buttons should remain disabled until the form can be submitted or the user can move on to the next step. ",(0,t.jsx)(r.rU,{href:"https://www.nngroup.com/articles/reset-and-cancel-buttons/",arrowAppearance:"persist",children:"Never use a reset button"}),"."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-15@3x.png"),className:(0,i.iv)({name:"1amy2oa",styles:"width:100%;height:401px"})}),"\n",(0,t.jsx)(n.p,{children:"Only surface a back button on a setup form that uses a stepper. If needed, place the back button on the bottom left of the sticky footer after the user has completed the first step."}),"\n",(0,t.jsx)(n.p,{children:"Multi-page settings forms (with no sticky footer) can also have a back button. In this scenario, place the back button on the top left."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-16@3x.png"),className:(0,i.iv)({name:"anqt1p",styles:"width:100%;height:402px"})}),"\n",(0,t.jsx)(n.h1,{id:"sticky-footer",children:(0,t.jsx)(n.a,{href:"#sticky-footer",children:"Sticky footer"})}),"\n",(0,t.jsxs)(n.p,{children:["Learn more about forms' sticky footers ",(0,t.jsx)(r.rU,{href:"/component/form-footer/guidelines/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h1,{id:"autosave",children:(0,t.jsx)(n.a,{href:"#autosave",children:"Autosave"})}),"\n",(0,t.jsx)(n.p,{children:"When possible, design settings page form inputs to validate inline and autosave (when not making destructive changes). When groups of form elements need to be completed in a setting form, consider placing the buttons inside the appropriate card. Avoid having global buttons on a settings page form."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-18@3x.png"),className:(0,i.iv)({name:"ti86mw",styles:"width:100%;height:403px"})}),"\n",(0,t.jsx)(n.h1,{id:"preventing-errors",children:(0,t.jsx)(n.a,{href:"#preventing-errors",children:"Preventing errors"})}),"\n",(0,t.jsx)(n.p,{children:"Use field length as an affordance for the type of entry the user needs to input."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-19@3x.png"),className:(0,i.iv)({name:"5kzmwv",styles:"width:100%;height:242px"})}),"\n",(0,t.jsx)(n.p,{children:"Whenever possible, surface input constraints to help users complete the form."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-20@3x.png"),className:(0,i.iv)({name:"s7f70l",styles:"width:100%;height:188px"})}),"\n",(0,t.jsx)(n.p,{children:"Make sure to surface a confirmation modal if the change is destructive or cannot be undone."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-21@3x.png"),className:(0,i.iv)({name:"15wql07",styles:"width:100%;height:274px"})}),"\n",(0,t.jsx)(n.p,{children:"Whenver possible use the approriate input type for the data you\u2019re collecting. Some of these inputs will have custom validation patterns."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-22@3x.png"),className:(0,i.iv)({name:"19lr99j",styles:"width:100%;height:125px"})}),"\n",(0,t.jsx)(n.h1,{id:"form-validation--error-handling",children:(0,t.jsx)(n.a,{href:"#form-validation--error-handling",children:"Form validation & error handling"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r.rU,{href:"https://www.nngroup.com/articles/errors-forms-design-guidelines/",arrowAppearance:"persist",children:"When user text input is required, aim for inline validation with real-time feedback whenever possible."})," Try not to let the user reach the end of the form to inform them that something\nis wrong. LeafyGreen inline validation has been developed such that, on valid (\u201cclean\u201d)\nfields, inline validation will occur when a user leaves the field; on invalid (\u201cdirty\u201d)\nfields, inline validation will occur while a user is typing in a field."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-23@3x.png"),className:(0,i.iv)({name:"1anzu8e",styles:"width:100%;height:354px"})}),"\n",(0,t.jsx)(n.p,{children:"There are 3 types of validation you can surface: success, error, or loading. All types can and should be used inline. (For success you can optionally add a checkmark to the input, if you want to provide a visual affordance for a complex entry in a field, like a password.)"}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-24@3x.png"),className:(0,i.iv)({name:"kwdpqq",styles:"width:100%;height:355px"})}),"\n",(0,t.jsx)(n.p,{children:"Sometimes inline validation is not possible when surfacing certain errors: In those instances, consider using a global error banner to provide an overview of the error if needed. Global error banners should be placed within the sticky footer of a form, to the left of the buttons. When a sticky footer is not applicable, place the error banner above the CTA buttons."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-25@3x.png"),className:(0,i.iv)({name:"1f3d55u",styles:"width:100%;height:416px"})}),"\n",(0,t.jsx)(n.h2,{id:"language",children:(0,t.jsx)(n.a,{href:"#language",children:"Language"})}),"\n",(0,t.jsx)(n.p,{children:"Use positive language, and/or provide a suggestion. Don\u2019t make users feel like they are at fault. Be clear in your error messages. Specify where the error is occuring and what needs to be done to fix it. (Exceptions to this rule exist, like login forms where credential security takes precedence.)"}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-26@3x.png"),className:(0,i.iv)({name:"1bzj3ds",styles:"width:100%;height:191px"})}),"\n",(0,t.jsx)(n.h1,{id:"required--optional-fields",children:(0,t.jsx)(n.a,{href:"#required--optional-fields",children:"Required & optional fields"})}),"\n",(0,t.jsxs)(n.p,{children:["Try to minimize the use of optional fields. In setup page forms, required fields should be marked as required using *. ",(0,t.jsx)(r.rU,{href:"https://www.nngroup.com/articles/required-fields/",arrowAppearance:"persost",children:"Optionally, label optional fields as optional"}),". Do not use required or optional markers for settings page forms."]}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-27@3x.png"),className:(0,i.iv)({name:"1r0hdo0",styles:"width:100%;height:488px"})}),"\n",(0,t.jsx)(n.h2,{id:"consider-the-device-type-the-form-will-be-completed-on",children:(0,t.jsx)(n.a,{href:"#consider-the-device-type-the-form-will-be-completed-on",children:"Consider the device type the form will be completed on"})}),"\n",(0,t.jsx)(n.p,{children:"Use the approriate mobile native pattern for each form input."}),"\n",(0,t.jsx)(o.Z,{imageURL:"".concat(l,"/form-guidelines-28@3x.png"),className:(0,i.iv)({name:"1pmahql",styles:"width:100%;height:375px"})})]})}}},66559:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/foundation/forms",function(){return s(25309)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=66559,e(e.s=n);var n}));var n=e.O();_N_E=n}]);